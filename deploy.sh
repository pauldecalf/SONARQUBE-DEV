#!/bin/bash

# Script de d√©ploiement SonarQube pour VPS Dokploy
# Usage: ./deploy.sh [production|development]

set -e

ENVIRONMENT=${1:-development}
COMPOSE_FILE="docker-compose.yml"

if [ "$ENVIRONMENT" = "production" ]; then
    COMPOSE_FILE="docker-compose.dokploy.yml"
fi

echo "üöÄ D√©ploiement de SonarQube en mode: $ENVIRONMENT"

# V√©rifications pr√©alables
echo "üìã V√©rification des pr√©requis..."

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©"
    exit 1
fi

# V√©rifier les param√®tres syst√®me
echo "üîß V√©rification des param√®tres syst√®me..."

MAX_MAP_COUNT=$(sysctl -n vm.max_map_count)
if [ "$MAX_MAP_COUNT" -lt 524288 ]; then
    echo "‚ö†Ô∏è  vm.max_map_count est trop bas ($MAX_MAP_COUNT). Configuration..."
    sudo sysctl -w vm.max_map_count=524288
    echo 'vm.max_map_count=524288' | sudo tee -a /etc/sysctl.conf
fi

FILE_MAX=$(sysctl -n fs.file-max)
if [ "$FILE_MAX" -lt 131072 ]; then
    echo "‚ö†Ô∏è  fs.file-max est trop bas ($FILE_MAX). Configuration..."
    sudo sysctl -w fs.file-max=131072
    echo 'fs.file-max=131072' | sudo tee -a /etc/sysctl.conf
fi

# Cr√©er le fichier .env s'il n'existe pas
if [ ! -f .env ]; then
    echo "üìù Cr√©ation du fichier .env..."
    cat > .env << EOF
# Base de donn√©es PostgreSQL
POSTGRES_USER=sonar
POSTGRES_PASSWORD=$(openssl rand -base64 32)
POSTGRES_DB=sonar

# Port SonarQube
SONAR_PORT=9000
EOF
    echo "‚úÖ Fichier .env cr√©√© avec un mot de passe al√©atoire"
fi

# Arr√™ter les conteneurs existants
echo "üõë Arr√™t des conteneurs existants..."
docker-compose -f $COMPOSE_FILE down 2>/dev/null || true

# Nettoyer les images obsol√®tes
echo "üßπ Nettoyage des images obsol√®tes..."
docker system prune -f

# Construire et d√©marrer
echo "üî® Construction et d√©marrage des conteneurs..."
if [ "$ENVIRONMENT" = "production" ]; then
    docker-compose -f $COMPOSE_FILE build --no-cache
fi

docker-compose -f $COMPOSE_FILE up -d

# Attendre que les services soient pr√™ts
echo "‚è≥ Attente du d√©marrage des services..."
sleep 30

# V√©rifier le statut des conteneurs
echo "üîç V√©rification du statut des conteneurs..."
docker-compose -f $COMPOSE_FILE ps

# Test de connectivit√©
echo "üåê Test de connectivit√© SonarQube..."
for i in {1..30}; do
    if curl -sf http://localhost:9000/api/system/status > /dev/null; then
        echo "‚úÖ SonarQube est accessible !"
        break
    fi
    echo "‚è≥ Tentative $i/30..."
    sleep 10
done

echo ""
echo "üéâ D√©ploiement termin√© !"
echo ""
echo "üìä Acc√®s √† SonarQube:"
echo "   URL: http://$(hostname -I | awk '{print $1}'):9000"
echo "   Login: admin"
echo "   Mot de passe: admin (√† changer lors de la premi√®re connexion)"
echo ""
echo "üîß Commandes utiles:"
echo "   Logs SonarQube: docker-compose -f $COMPOSE_FILE logs -f sonarqube"
echo "   Logs PostgreSQL: docker-compose -f $COMPOSE_FILE logs -f db"
echo "   Arr√™ter: docker-compose -f $COMPOSE_FILE down"
echo "   Red√©marrer: docker-compose -f $COMPOSE_FILE restart"
echo ""
echo "‚ö†Ô∏è  N'oubliez pas de:"
echo "   1. Changer le mot de passe admin"
echo "   2. Configurer HTTPS avec un reverse proxy"
echo "   3. Sauvegarder r√©guli√®rement vos donn√©es" 